<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>r2ys blog</title>
    <link>/</link>
    <description>Recent content on r2ys blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2021-{year} r2ys. All Rights Reserved.</copyright>
    <lastBuildDate>Thu, 10 Mar 2022 11:43:00 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>每日翻译例句</title>
      <link>/posts/notes/%E6%AF%8F%E6%97%A5%E7%BF%BB%E8%AF%91%E4%BE%8B%E5%8F%A5/</link>
      <pubDate>Thu, 10 Mar 2022 11:43:00 +0800</pubDate>
      
      <guid>/posts/notes/%E6%AF%8F%E6%97%A5%E7%BF%BB%E8%AF%91%E4%BE%8B%E5%8F%A5/</guid>
      <description> 人各有志：Everyone has his own ambition/aspiration.  </description>
    </item>
    
    <item>
      <title>分布式一致性算法EPaxos.md</title>
      <link>/posts/notes/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95epaxos/</link>
      <pubDate>Tue, 29 Jun 2021 17:20:00 +0800</pubDate>
      
      <guid>/posts/notes/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95epaxos/</guid>
      <description>https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247500380&amp;amp;idx=1&amp;amp;sn=025c1c9fcdba8e72a5eb2e8c8aad98fd&amp;amp;chksm=e92aff53de5d76454f580f3adebda282f31d3f97a3d5c6f8cdb9c2d5d8283b1719263368753b&amp;amp;mpshare=1&amp;amp;scene=24&amp;amp;srcid=1028xGhlHoY5tz23wMlOVs1C&amp;amp;sharer_sharetime=1603845682194&amp;amp;sharer_shareid=cbc82124cedc2b0864b983af90cce39a#rd</description>
    </item>
    
    <item>
      <title>权限认证框架怎么选.md</title>
      <link>/posts/notes/%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E6%80%8E%E4%B9%88%E9%80%89/</link>
      <pubDate>Tue, 29 Jun 2021 17:18:00 +0800</pubDate>
      
      <guid>/posts/notes/%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E6%80%8E%E4%B9%88%E9%80%89/</guid>
      <description>目前常用的几种可选框架 sa-token https://mp.weixin.qq.com/s?__biz=MzU3MDc3OTI1NA==&amp;amp;mid=2247490668&amp;amp;idx=1&amp;amp;sn=cd9efecdf1ac34cc8cac04902a9f8319&amp;amp;chksm=fceb6f75cb9ce663f818cbaaa78e5d9eb9d8142f721e9385056ad9f68f7277acd03c509fe531&amp;amp;mpshare=1&amp;amp;scene=24&amp;amp;srcid=0321KOsiEPuUB5RpsMsy6y9g&amp;amp;sharer_sharetime=1616285588520&amp;amp;sharer_shareid=cbc82124cedc2b0864b983af90cce39a#rd</description>
    </item>
    
    <item>
      <title>学会Innodb各种锁.md</title>
      <link>/posts/notes/%E5%AD%A6%E4%BC%9Ainnodb%E5%90%84%E7%A7%8D%E9%94%81/</link>
      <pubDate>Tue, 29 Jun 2021 17:17:00 +0800</pubDate>
      
      <guid>/posts/notes/%E5%AD%A6%E4%BC%9Ainnodb%E5%90%84%E7%A7%8D%E9%94%81/</guid>
      <description>https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;amp;mid=2651967369&amp;amp;idx=1&amp;amp;sn=d639abf6772a72c25cc2537749258163&amp;amp;chksm=bd2d7a558a5af3436e0a435a3e7cd9f72f67c1269370be936a82dc0af483f47aefa48bd58d69&amp;amp;mpshare=1&amp;amp;scene=24&amp;amp;srcid=0427iuPM9K3Qh3Ds8LvD8m2E&amp;amp;sharer_sharetime=1619533884103&amp;amp;sharer_shareid=cbc82124cedc2b0864b983af90cce39a#rd</description>
    </item>
    
    <item>
      <title>参数校验怎么做更优雅.md</title>
      <link>/posts/notes/%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C%E6%80%8E%E4%B9%88%E5%81%9A%E6%9B%B4%E4%BC%98%E9%9B%85/</link>
      <pubDate>Tue, 29 Jun 2021 17:16:00 +0800</pubDate>
      
      <guid>/posts/notes/%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C%E6%80%8E%E4%B9%88%E5%81%9A%E6%9B%B4%E4%BC%98%E9%9B%85/</guid>
      <description>https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247503481&amp;amp;idx=1&amp;amp;sn=c85ae5d031b8b27b267a277484c05c87&amp;amp;chksm=e92af376de5d7a604d5f0c0078c5f3de4e5ac3540a018b1cc0ecf434ea90db1aac8f0150d1fe&amp;amp;mpshare=1&amp;amp;scene=24&amp;amp;srcid=0520kljGHoaZJv6QcY41Fh2d&amp;amp;sharer_sharetime=1621485378939&amp;amp;sharer_shareid=cbc82124cedc2b0864b983af90cce39a#rd</description>
    </item>
    
    <item>
      <title>Jenkins类的工具能帮我们做什么.md</title>
      <link>/posts/notes/jenkins%E7%B1%BB%E7%9A%84%E5%B7%A5%E5%85%B7%E8%83%BD%E5%B8%AE%E6%88%91%E4%BB%AC%E5%81%9A%E4%BB%80%E4%B9%88/</link>
      <pubDate>Tue, 29 Jun 2021 16:57:00 +0800</pubDate>
      
      <guid>/posts/notes/jenkins%E7%B1%BB%E7%9A%84%E5%B7%A5%E5%85%B7%E8%83%BD%E5%B8%AE%E6%88%91%E4%BB%AC%E5%81%9A%E4%BB%80%E4%B9%88/</guid>
      <description>Jenkins的替代方案 https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2651050229&amp;amp;idx=5&amp;amp;sn=af2d0f8fc317cb4d73b14fc0c10f442e&amp;amp;chksm=bdbe28a68ac9a1b0461e43ef836aa9bfa9f397c1738bc60dc8d34742fb0b0bedacd0c367915c&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=1112OHSz20a9MsKcNCtRODfZ&amp;amp;sharer_sharetime=1605160588581&amp;amp;sharer_shareid=cbc82124cedc2b0864b983af90cce39a#rd
 https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;amp;mid=2247518077&amp;amp;idx=1&amp;amp;sn=69cf89c46b453520460c0e375bfb3472&amp;amp;chksm=fa4af8cccd3d71dacc33bb6cfc3496af2d32fc4a1b5da32927ad7702b5baea2b6c2a3b3ab460&amp;amp;mpshare=1&amp;amp;scene=24&amp;amp;srcid=0612nZqBnjk98Ioh7rV6IvE4&amp;amp;sharer_sharetime=1623497834187&amp;amp;sharer_shareid=cbc82124cedc2b0864b983af90cce39a#rd</description>
    </item>
    
    <item>
      <title>响应式编程Vert.x入门.md</title>
      <link>/posts/notes/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8Bvert.x%E5%85%A5%E9%97%A8/</link>
      <pubDate>Tue, 29 Jun 2021 16:56:00 +0800</pubDate>
      
      <guid>/posts/notes/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8Bvert.x%E5%85%A5%E9%97%A8/</guid>
      <description>Vert.x Core项目源码地址： https://github.com/eclipse-vertx/vert.x Zulu JDK下载地址：https://www.azul.com/downloads/zulu-community/?os=macos&amp;amp;package=jdk JDK 国内镜像站：https://www.injdk.cn 也可以找到适配M1 Mac的Zulu版本</description>
    </item>
    
    <item>
      <title>用好IDEA插件带来的好处.md</title>
      <link>/posts/notes/%E7%94%A8%E5%A5%BDidea%E6%8F%92%E4%BB%B6%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%A5%BD%E5%A4%84/</link>
      <pubDate>Tue, 29 Jun 2021 16:54:00 +0800</pubDate>
      
      <guid>/posts/notes/%E7%94%A8%E5%A5%BDidea%E6%8F%92%E4%BB%B6%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%A5%BD%E5%A4%84/</guid>
      <description>HttpClient插件 https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;amp;mid=2247505020&amp;amp;idx=1&amp;amp;sn=3075f2a466d1d2df949c63ae4393f81e&amp;amp;chksm=fa4aabcdcd3d22dbe79c200f0c087b9b404a5b01047ef4993b3512426209655493ecf9ad953b&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=12240mUmXWr6agTCvhkHbKkg&amp;amp;sharer_sharetime=1608818291964&amp;amp;sharer_shareid=cbc82124cedc2b0864b983af90cce39a#rd
文档生成插件 git提交插件 如何自己开发插件 https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247500551&amp;amp;idx=1&amp;amp;sn=0feada3f16404a10c9632689a060082e&amp;amp;chksm=e92afe08de5d771e153f5f91d60a169df29f2bec1afc481df550f1022bd1e8eccd9d9228dc00&amp;amp;mpshare=1&amp;amp;scene=24&amp;amp;srcid=1106mOqUWRt3EUcQS6fX1wYu&amp;amp;sharer_sharetime=1604622305608&amp;amp;sharer_shareid=cbc82124cedc2b0864b983af90cce39a#rd</description>
    </item>
    
    <item>
      <title>如何写好单元测试用例.md</title>
      <link>/posts/notes/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</link>
      <pubDate>Tue, 29 Jun 2021 16:53:00 +0800</pubDate>
      
      <guid>/posts/notes/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</guid>
      <description>阿里的mock工具有什么魔法 https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247501494&amp;amp;idx=1&amp;amp;sn=54d20391a4d0d3a8ddbbb2d4e777d771&amp;amp;chksm=e92afbb9de5d72af37fad640ba1401afb22fa1caf99eef58374c110abfcb0179cf1c8eaf39ce&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=1222b0NpB7mhljSLhpklzHbA&amp;amp;sharer_sharetime=1608595647786&amp;amp;sharer_shareid=cbc82124cedc2b0864b983af90cce39a#rd</description>
    </item>
    
    <item>
      <title>如何做好一个API网关.md</title>
      <link>/posts/notes/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E4%B8%80%E4%B8%AAapi%E7%BD%91%E5%85%B3/</link>
      <pubDate>Tue, 29 Jun 2021 16:51:00 +0800</pubDate>
      
      <guid>/posts/notes/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E4%B8%80%E4%B8%AAapi%E7%BD%91%E5%85%B3/</guid>
      <description>api网关设计的方方面面 https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;amp;mid=2247507916&amp;amp;idx=4&amp;amp;sn=b55ef35bce39ae448ad472e20393fb11&amp;amp;chksm=fa4aa07dcd3d296b7bfcb786975f7271e4184596c87e4a6d5ce17643bbdde452d08026950d67&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0205Rd3F9PaDvFcm4BrgbPLp&amp;amp;sharer_sharetime=1612493454398&amp;amp;sharer_shareid=cbc82124cedc2b0864b983af90cce39a#rd
如何设计 https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;amp;mid=2247507679&amp;amp;idx=3&amp;amp;sn=0e54bf6c578a85601e45a44bc8bfca0f&amp;amp;chksm=fa4aa16ecd3d2878ba5b7273b11b91302e31af04b75b3c0ac1f1408c8c4948f98fbc27e45356&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0201frLvZI3FLO5OoGr767hz&amp;amp;sharer_sharetime=1612155601583&amp;amp;sharer_shareid=cbc82124cedc2b0864b983af90cce39a#rd
开源API网关对比 https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;amp;mid=2247518160&amp;amp;idx=1&amp;amp;sn=00d4d72312ac8960c5523908feacc50b&amp;amp;chksm=fa4af861cd3d717724ab3bd58f254c9499b40a5343fe8e1758c91ab0fb0f13fe0172d5ce2506&amp;amp;mpshare=1&amp;amp;scene=24&amp;amp;srcid=0614RrmDpr1WiO6KEt2yPaQZ&amp;amp;sharer_sharetime=1623626262648&amp;amp;sharer_shareid=cbc82124cedc2b0864b983af90cce39a#rd</description>
    </item>
    
    <item>
      <title>如何使用日志框架.md</title>
      <link>/posts/notes/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Tue, 29 Jun 2021 16:49:00 +0800</pubDate>
      
      <guid>/posts/notes/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</guid>
      <description>如何选择日志框架并解决冲突 logback配置文件 https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;amp;mid=2247507916&amp;amp;idx=3&amp;amp;sn=99226aa132805fcac3dec83f0d494acb&amp;amp;chksm=fa4aa07dcd3d296b70402e2dcc9ab5a6136df8eafdcc758b4223d9e4433d1bd022f228a2bcab&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0205CqK4JI2wmmpCogocXv4r&amp;amp;sharer_sharetime=1612493462792&amp;amp;sharer_shareid=cbc82124cedc2b0864b983af90cce39a#rd
配置日志链路 traceId MDC </description>
    </item>
    
    <item>
      <title>如何向HR提出合理的涨薪要求.md</title>
      <link>/posts/notes/%E5%A6%82%E4%BD%95%E5%90%91hr%E6%8F%90%E5%87%BA%E5%90%88%E7%90%86%E7%9A%84%E6%B6%A8%E8%96%AA%E8%A6%81%E6%B1%82/</link>
      <pubDate>Tue, 29 Jun 2021 16:43:00 +0800</pubDate>
      
      <guid>/posts/notes/%E5%A6%82%E4%BD%95%E5%90%91hr%E6%8F%90%E5%87%BA%E5%90%88%E7%90%86%E7%9A%84%E6%B6%A8%E8%96%AA%E8%A6%81%E6%B1%82/</guid>
      <description>态度 在金科和惠金所合并前后都是骨干、核心开发，因为我负责的系统多，11个，也都是平台核心系统，比如支付、存管，这些当中大部分也都是我一个人在负责，最新研发的区块链存证系统也是我独立研发的。 加上最近架构调整，部门去年计划把我提成室经理，过去的这半年多已经让我带一个框架研发团队了，既负责团队管理，还要兼顾系统设计和开发和运维，我们团队是人最少的，负责系统最多的，而且未来负责的系统会更多，我觉得我为单位做的贡献是远大于上次调薪的比例的。 结合市场行情我相信目前同级别的同事里我的工资应该是算最低的，但是相比我做的事是最多的。这点我们整个部门都是认可的。
因为目前的级别是高级后台开发和架构师。 来咱们公司差四个月满3年了，上个月调薪是来咱们公司之后第一次调，整体的薪资规划和我计划的是差很多的，我媳妇刚怀了宝宝，并且换了房子，压力比较大，目前的薪资水平会很大方面影响我的工作 我希望调薪的最终目标是总包最低43，这个目标不是随口说的，因为公司离职的前同事里边，内推我的特别多。 按照上一年的薪酬和年终奖，我拿到的总计时30。我觉得我的要求不算过分。
我觉得无论是咱们公司还是其它公司，肯定是能者既多劳也多得！而且不论是什么情况，我都会站好我这一班岗，因为作为员工来说，做好了自然能证明自己。做不好也没资格提什么要求，我们也都理解。
要放松、自信且尊重
整体谈判态度：放松、自信且尊重
姓名：胡丁武 入职时间：差四个月满3年 岗位和职责：在金科和惠金所合并前后都是骨干、核心开发 当前工作：负责的系统多，11个，都是平台核心系统，比如支付、存管，这些当中大部分也都是我一个人在负责，部门最新研发的区 块链存证系统也是我独立研发 后续工作重心：最近架构调整，部门去年计划把我提成室经理，让我带一个框架研发团队（核心团队，人少），这半年多既负责团队 管理，还要兼顾系统设计和开发和运维，目前直接负责系统最多，未来系统会更多 部门的定位：相比相同职位的同事，我做的事是最多的，我为单位做的贡献是受整个部门认可的。 级别：目前的级别是高级后台开发和架构师 薪资规划：上个月调薪是来咱们公司之后第一次调，整体的薪资规划和我计划的是差很多的 家庭：我媳妇刚怀了宝宝，并且换了房子，压力比较大，目前的薪资水平会很大方面影响我的工作 目标和期望：我希望调薪的最终目标是总包最低43 offer方面：这个目标不是随口说的，因为公司离职的前同事里边，内推我的特别多。 调薪合理性：按照上一年的薪酬和年终奖，我拿到的总计时30。我觉得我的要求不算过分。 工作态度：我觉得无论是咱们公司还是其它公司，肯定是能者既多劳也多得！而且不论是什么情况，我都会站好我这一班岗，因为作 为员工来说，做好了自然能证明自己。做不好也没资格提什么要求，我们也都理解。
谈判主导方向 谈判要点 最后的筹码 最后的底线  </description>
    </item>
    
    <item>
      <title>如何全部搞懂设计模式.md</title>
      <link>/posts/notes/%E5%A6%82%E4%BD%95%E5%85%A8%E9%83%A8%E6%90%9E%E6%87%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 29 Jun 2021 16:35:00 +0800</pubDate>
      
      <guid>/posts/notes/%E5%A6%82%E4%BD%95%E5%85%A8%E9%83%A8%E6%90%9E%E6%87%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;amp;mid=2247516612&amp;amp;idx=1&amp;amp;sn=da8d528697a15722e3aa53986aa3aada&amp;amp;chksm=fa4afe75cd3d7763d367929411ff0affca05b71ab827148b2cb7d6dbbb88b33bc76fa3d5a4a4&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0525GBDcNZ5yv9lgXOrcNzj4&amp;amp;sharer_sharetime=1621911183717&amp;amp;sharer_shareid=cbc82124cedc2b0864b983af90cce39a#rd
廖雪峰的java教程中对java设计模式讲的特别好，通俗易懂 https://www.liaoxuefeng.com/wiki/1252599548343744/1264742167474528</description>
    </item>
    
    <item>
      <title>如何把分布式事务讲清楚.md</title>
      <link>/posts/notes/%E5%A6%82%E4%BD%95%E6%8A%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%AE%B2%E6%B8%85%E6%A5%9A/</link>
      <pubDate>Tue, 29 Jun 2021 16:26:00 +0800</pubDate>
      
      <guid>/posts/notes/%E5%A6%82%E4%BD%95%E6%8A%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%AE%B2%E6%B8%85%E6%A5%9A/</guid>
      <description>https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;amp;mid=2651968036&amp;amp;idx=2&amp;amp;sn=0e3b26a3fc7a46785433eed013e8907b&amp;amp;chksm=bd2d67f88a5aeeee6104fa43f8b78ac62aa7267633e3d14101733835189f44b42c8586bba204&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0617HHC4h4WvvkqalGv1uQcA&amp;amp;sharer_sharetime=1623935878168&amp;amp;sharer_shareid=cbc82124cedc2b0864b983af90cce39a#rd</description>
    </item>
    
    <item>
      <title>程序员是否应该转变管理岗.md</title>
      <link>/posts/notes/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%98%AF%E5%90%A6%E5%BA%94%E8%AF%A5%E8%BD%AC%E5%8F%98%E7%AE%A1%E7%90%86%E5%B2%97/</link>
      <pubDate>Tue, 29 Jun 2021 16:23:00 +0800</pubDate>
      
      <guid>/posts/notes/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%98%AF%E5%90%A6%E5%BA%94%E8%AF%A5%E8%BD%AC%E5%8F%98%E7%AE%A1%E7%90%86%E5%B2%97/</guid>
      <description>  技术性岗位可以向管理岗位转，反过来则不成立，老不碰代码，代码能力就下降了。 裁员浪潮中，首当其冲的就是纯管理，技术人员再找工作比纯管理好。管理的成果可能产生于大环境和所在公司，体现不了你自己本身的价值。 技术才是保命的本领。  </description>
    </item>
    
    <item>
      <title>剖析动态代理.md</title>
      <link>/posts/notes/%E5%89%96%E6%9E%90%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</link>
      <pubDate>Tue, 29 Jun 2021 16:18:00 +0800</pubDate>
      
      <guid>/posts/notes/%E5%89%96%E6%9E%90%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</guid>
      <description>https://blog.csdn.net/andy_67/article/details/84837804 https://blog.csdn.net/user2025/article/details/106039999?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.control&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.control https://blog.csdn.net/Dongguabai/article/details/80788585 https://mp.weixin.qq.com/s?__biz=MzU1OTgyMDc3Mg==&amp;amp;mid=2247483911&amp;amp;idx=1&amp;amp;sn=f6d3fbd8ca0f09bc0ee4cf346bc4e862&amp;amp;chksm=fc10388ccb67b19ac3042fbc8ea3f1cce035172fb46651a86f351eb915751547440eb8edee72&amp;amp;token=336585355&amp;amp;lang=zh_CN#rd%20https://mp.weixin.qq.com/s?__biz=MzU1OTgyMDc3Mg==&amp;amp;mid=2247483918&amp;amp;idx=1&amp;amp;sn=60b22f9555eefb2e5e0c4b88f5be3003&amp;amp;chksm=fc103885cb67b1930e2715f0cfd7fde3fc35732caa4d37fe0492da56876209a9ed45a61d0e4a&amp;amp;token=336585355&amp;amp;lang=zh_CN#rd</description>
    </item>
    
    <item>
      <title>对批量数据核验并更新的demo</title>
      <link>/posts/notes/%E5%AF%B9%E6%89%B9%E9%87%8F%E6%95%B0%E6%8D%AE%E6%A0%B8%E9%AA%8C%E5%B9%B6%E6%9B%B4%E6%96%B0%E7%9A%84demo/</link>
      <pubDate>Tue, 29 Jun 2021 16:14:00 +0800</pubDate>
      
      <guid>/posts/notes/%E5%AF%B9%E6%89%B9%E9%87%8F%E6%95%B0%E6%8D%AE%E6%A0%B8%E9%AA%8C%E5%B9%B6%E6%9B%B4%E6%96%B0%E7%9A%84demo/</guid>
      <description>EasyExcel的使用 </description>
    </item>
    
    <item>
      <title>ios develop certificate understanding</title>
      <link>/posts/notes/2020-01-16-ios-develop-certificate-understanding/</link>
      <pubDate>Thu, 16 Jan 2020 08:47:24 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-16-ios-develop-certificate-understanding/</guid>
      <description>理解iOS开发证书 术语解释 cer 一种文件格式，存储的是公钥，学名证书
如何生成cer  der二进制编码（cer有别于ber、der） base64编码  der 二进制格式，不可读，Java和Windows服务器偏向使用这种格式 DER格式的证书基于X.509标准
PKCS#12 一个公钥加密的标准，总共有15个
p12 .p12是基于PKCS#12标准生成的一种文件格式，存储的是私钥 mac系统下在keychains钥匙串中找到证书-&amp;gt;导出-&amp;gt;p12就可以
数字证书 无论是cer还是p12，广义上说都可以被称为数字证书。 | 什么是数字证书呢？数字证书就是互联网通讯中标志通讯各方身份信息的一串数字，提供了一种在Internet上验证通信实体身份的方式，数字证书不是数字身份证，而是身份认证机构盖在数字身份证上的一个章或印（或者说加在数字身份证上的一个签名）。它是由权威机构——CA机构，又称为证书授权（CertificateAuthority）中心发行的，人们可以在网上用它来识别对方的身份。在当今这个互联网时代，已经成为了必不可少，不可或缺的一个过程。
 PEM pem文件是p12文件转换后的一种文件格式，存储的也是密码（私钥还是公钥？），内容是BASE64编码 以&amp;mdash;&amp;ndash;BEGIN开头，&amp;mdash;&amp;ndash;END结束 Apache和Linux、Unix服务器偏向使用这种编码格式 PEM格式的证书基于X.509标准
Https和Http关于s的区别以及SSL OpenSSL 是SSL规范的一种实现。它还提供了一些工具软件，SSL证书需要符合的是一种标准X.509、RFC5280
证书编码格式的问题 证书编码格式常见的有pem和der，但是文件扩展名并一定就是它俩，证书可以转换为其它编码格式，内容也有差别
证书格式  CRT CER KEY PFX/p12 JKS  CSR Certificate Signing Request, 证书签名请求，用户生成公私钥，私钥自己保存好，公钥作为申请内容，向证书颁发机构申请获得签名证书
iOS证书申请、到发布、再到用户安装过程中的流程 ![]({{ site.baseurl }}/images/apple_auth_process.png)</description>
    </item>
    
    <item>
      <title>charactoristics on hyperledger fabric</title>
      <link>/posts/notes/2020-01-15-charactoristics-on-hyperledger-fabric/</link>
      <pubDate>Wed, 15 Jan 2020 11:03:42 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-15-charactoristics-on-hyperledger-fabric/</guid>
      <description>charactoristics on hyperledger fabric 一个标准的可认为是最佳实践的fabric项目应当具备的特性   初始配置
  各组件启动
  通道创建和加入
  链码的注册和实例化
  界面化的demo演示交易的调用
  blockchain explorer启动和查看运行、网络、区块、交易
  demo应用监听事件
  多级证书配置和可插拔
  动态加入和撤出组织
  更换排序共识插件
  组件无限扩展
  账本、状态的存储结构替换
  多通道
   </description>
    </item>
    
    <item>
      <title>learn ast</title>
      <link>/posts/notes/2020-01-15-learn-ast/</link>
      <pubDate>Wed, 15 Jan 2020 11:02:41 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-15-learn-ast/</guid>
      <description>抽象语法树AST https://baijiahao.baidu.com/s?id=1626159656211187310&amp;amp;wfr=spider&amp;amp;for=pc</description>
    </item>
    
    <item>
      <title>design a flow based develop and invoke system</title>
      <link>/posts/notes/2020-01-15-design-a-flow-based-develop-and-invoke-system/</link>
      <pubDate>Wed, 15 Jan 2020 11:02:00 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-15-design-a-flow-based-develop-and-invoke-system/</guid>
      <description>design a flow based develop and invoke system todo cabala重构点： 根据接口查脚本 根据脚本反查接口
脚本写完模拟调用 接口写完模拟调用
管理页面提取成一套，根据接口名称和脚本名称查询 搜索规则有：list，count，save，get，edit，remove，其它
业务模块-&amp;gt;接口 -&amp;gt;脚本(脚本中指定库)
开始结束 循环、判断 数据库操作 缓存操作
调用子服务 同步和异步
从原始接口表更新到目标接口表：指定接口号和脚本代码即可，自动拉取同步，自动刷新缓存，永不重启引擎服务
开启提示模式时，节点入出的参数都展示出来
判断、循环的代码段可以边编辑边拷贝参考
接口流程图直接生成一个单独文件，并保存至文件服务器
接口流程图可以映射到文档文件，文档文件可以直接生成接口流程图
接口流程图有专门的查看搜索等管理，选择环境可以查看，各节点全部展示出出入参
接口可以导入导出流程图
每天自动把节点</description>
    </item>
    
    <item>
      <title>learn shell from start</title>
      <link>/posts/notes/2020-01-15-learn-shell-from-start/</link>
      <pubDate>Wed, 15 Jan 2020 11:01:03 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-15-learn-shell-from-start/</guid>
      <description>learn shell from start 打印日期的两种方式 echo today is `date &amp;#34;+%Y-%m-%d&amp;#34;` echo today is $(date &amp;#34;+%Y-%m-%d&amp;#34;) shell中变量的使用 mypid=$$ echo &amp;ldquo;mypid:$mypid&amp;rdquo;
paramCount=$# echo &amp;ldquo;paramCount:$paramCount&amp;rdquo;
lastPid=$! echo &amp;ldquo;lastPid:$lastPid&amp;rdquo;
lastResponse=$? echo &amp;ldquo;lastResponse:$lastResponse&amp;rdquo;
setFlag=$- echo &amp;ldquo;setFlag:$setFlag&amp;rdquo;
params=$* echo &amp;ldquo;params:$params&amp;rdquo;
stringParams=$@ echo &amp;ldquo;stringParams:$params&amp;rdquo;
param0=$0 echo &amp;ldquo;param0:$param0&amp;rdquo;
param1=$1 echo &amp;ldquo;param1:$param1&amp;rdquo; printf &amp;ldquo;param1 is %s\n&amp;rdquo; $param1
for i in $@; do echo $i done
for i in $params; do echo $i done
`` 和 $() 里面的都是命令 echo Linux echo Shell echo today is date &amp;quot;+%Y-%m-%d&amp;quot;``` echo Linux echo Shell $(echo today is $(date &amp;ldquo;+%Y-%m-%d&amp;rdquo;))` echo Linux $(echo Shell $(echo today is $(date &amp;ldquo;+%Y-%m-%d&amp;rdquo;)))</description>
    </item>
    
    <item>
      <title>byzantine</title>
      <link>/posts/notes/2020-01-15-byzantine/</link>
      <pubDate>Wed, 15 Jan 2020 11:00:03 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-15-byzantine/</guid>
      <description>byzantine：拜占庭问题的算法 https://www.zhihu.com/question/30288330
1.5（P - E） &amp;gt; P 3 / 2 * P - 3 / 2 * E &amp;gt; P 1 / 2 * P &amp;gt; 3 / 2 * E P &amp;gt; 3 E 1 / 3 * P &amp;gt; E
如果系统中有n个故障节点，系统要想正确运行，必须至少要有2n+1个正常节点
P = N + E N &amp;gt; X &amp;gt; N/2 + E
1.5N &amp;gt; N + E
1 / 2 N &amp;gt; E N &amp;gt; 2E
所有正确的节点最终会决定一个值（termination） 所有正确的节点决定的值必须相同（agreement） 所有正确的节点决定的值必须是被正确的节点提出来的（validity）</description>
    </item>
    
    <item>
      <title>distributed system learn key point</title>
      <link>/posts/notes/2020-01-15-distributed-system-learn-key-point/</link>
      <pubDate>Wed, 15 Jan 2020 10:58:31 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-15-distributed-system-learn-key-point/</guid>
      <description>distributed system learn key point </description>
    </item>
    
    <item>
      <title>maven project directory standard</title>
      <link>/posts/notes/2020-01-15-maven-project-directory-standard/</link>
      <pubDate>Wed, 15 Jan 2020 10:56:08 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-15-maven-project-directory-standard/</guid>
      <description>maven project directory standard </description>
    </item>
    
    <item>
      <title>parse request url</title>
      <link>/posts/notes/2020-01-15-parse-request-url/</link>
      <pubDate>Wed, 15 Jan 2020 10:53:49 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-15-parse-request-url/</guid>
      <description>parse request url </description>
    </item>
    
    <item>
      <title>linux close selinux</title>
      <link>/posts/notes/2020-01-15-linux-close-selinux/</link>
      <pubDate>Wed, 15 Jan 2020 10:52:25 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-15-linux-close-selinux/</guid>
      <description>CentOS7关闭SELinux [root@dev-server ~]# getenforce Disabled [root@dev-server ~]# /usr/sbin/sestatus SELinux status: disabled # 永久关闭 vi /etc/selinux/config # 将SELINUX=enforcing改为SELINUX=disabled # 重启后生效 </description>
    </item>
    
    <item>
      <title>operate linux firewall</title>
      <link>/posts/notes/2020-01-15-operate-linux-firewall/</link>
      <pubDate>Wed, 15 Jan 2020 10:51:33 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-15-operate-linux-firewall/</guid>
      <description>centOS7永久关闭防火墙 # 查看状态 systemctl status firewalld.service # 关闭 systemctl stop firewalld.service # 开机禁用 systemctl disable firewalld.service # 开启 systemctl start firewalld.service # 开机启用 systemctl enable firewalld.service </description>
    </item>
    
    <item>
      <title>learn hibernate mybatis and orm</title>
      <link>/posts/notes/2020-01-15-learn-hibernate-mybatis-and-orm/</link>
      <pubDate>Wed, 15 Jan 2020 10:50:39 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-15-learn-hibernate-mybatis-and-orm/</guid>
      <description>learn hibernate mybatis and orm todo hibernate mybatis ORM</description>
    </item>
    
    <item>
      <title>database design</title>
      <link>/posts/notes/2020-01-15-database-design/</link>
      <pubDate>Wed, 15 Jan 2020 10:48:26 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-15-database-design/</guid>
      <description>数据库设计的原则 简单记录几点要点  符合业务需求 避免冗余  数据仓库设计要以哪些指标为主？  需求 维度 指标  数据库的需求和数据仓库需求的不同  数据库要求的是实时，一致 数据仓库要求的是汇总数据有效，全量，不需实时  数据仓库产生的因素 数据仓库产生于数据库之上，为了进一步挖掘数据资源、决策需要而存在</description>
    </item>
    
    <item>
      <title>derby and mysql</title>
      <link>/posts/notes/2020-01-15-derby-and-mysql/</link>
      <pubDate>Wed, 15 Jan 2020 10:47:28 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-15-derby-and-mysql/</guid>
      <description>derby and mysql todo derby 哪些方面能代替mysql MariaDB 为什么是mysql的分支 </description>
    </item>
    
    <item>
      <title>query linux tcp exceptional tcp connections</title>
      <link>/posts/notes/2020-01-15-query-linux-tcp-exceptional-tcp-connections/</link>
      <pubDate>Wed, 15 Jan 2020 10:45:49 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-15-query-linux-tcp-exceptional-tcp-connections/</guid>
      <description>查询linux中各种状态的tcp连接 netstat -ant |grep CLOSE_WAIT|wc -l 同理可替换CLOSE_WAIT为  TIME_WAIT ESTABLISHED  </description>
    </item>
    
    <item>
      <title>difference from array and arraylist</title>
      <link>/posts/notes/2020-01-15-difference-from-array-and-arraylist/</link>
      <pubDate>Wed, 15 Jan 2020 10:44:25 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-15-difference-from-array-and-arraylist/</guid>
      <description>Array和ArrayList的各自特点和区别 Array  内存中是连续的 读取和赋值很快 扩容和收缩很慢 需要指定内存大小  ArrayList  不需要指定容量 方便动态扩容和收缩 可以保存不同类型，本质都当作Object处理 ArrayList不是类型安全，需要拆装箱 通过指定泛型，通过编译来强制使用正确统一的数据类型，也减少了类型转换  </description>
    </item>
    
    <item>
      <title>delete dirty lines in mysql</title>
      <link>/posts/notes/2020-01-15-delete-dirty-lines-in-mysql/</link>
      <pubDate>Wed, 15 Jan 2020 10:38:28 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-15-delete-dirty-lines-in-mysql/</guid>
      <description>清楚重复数据 建表 CREATE TABLE `src5` ( `userid` int(11) unsigned NOT NULL AUTO_INCREMENT, `username` varchar(20) DEFAULT NULL, `usercode` varchar(20) DEFAULT NULL, PRIMARY KEY (`userid`) ) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8; 如果usercode重复，那么可能会出现以下数据 userid username usercode 1 &amp;hellip; code0 2 &amp;hellip; code0 3 &amp;hellip; code0
删除id最大的那一行，比如删除code0，userid为3的那行 DELETE FROM src5 WHERE userid IN ( SELECT id FROM ( SELECT MAX(userid) AS id, COUNT(usercode) AS ucount FROM src5 GROUP BY usercode HAVING ucount &amp;gt; 1 ORDER BY ucount DESC ) tab ) 如果没有自增主键，需要先临时增加，以tmpid为count ALTER TABLE src5 ADD COLUMN tmpid INT(11) PRIMARY KEY AUTO_INCREMENT; 最后再删除 ALTER TABLE src5 DROP COLUMN tmpid; 同时修改原来的主键column ALTER table table_name add PRIMARY KEY (user_role_id) </description>
    </item>
    
    <item>
      <title>how to descripe in resume</title>
      <link>/posts/notes/2020-01-15-how-to-descripe-in-resume/</link>
      <pubDate>Wed, 15 Jan 2020 09:33:05 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-15-how-to-descripe-in-resume/</guid>
      <description>写好一份技术简历的要点 几个注意点  框架是重点，但别让人感觉你只会山寨别人的代码 别单纯看单机版的框架，适当了解些分布式 数据库方面，别就知道增删改查，得了解性能优化，NoSQL亦如此 Java核心方面，围绕数据结构和性能优化准备面试题 Linux方面，至少了解如何看日志排查问题 通读一些底层代码，作为加分项  一切的一切，把上述技能嵌入到你做过的项目里 </description>
    </item>
    
    <item>
      <title>write work summary</title>
      <link>/posts/notes/2020-01-14-write-work-summary/</link>
      <pubDate>Tue, 14 Jan 2020 16:48:02 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-14-write-work-summary/</guid>
      <description>write work summary 总结中必须包含的几大内容点  工作中暴露问题 某些方案提出合理的方案 自己工作中的提升 对来年的展望 未来公司的规划、个人的规划  工作总结要可以体现出以下特点  精确 准确、量化 对公司核心的作用 工作重要性的排列 可以借鉴给他人复用的工作经验 必要的反思 来年工作计划、思考、体现出热情  其它补充的点  应当适当表明成功来源于领导 征求领导的建议 不告状 *不带情绪  </description>
    </item>
    
    <item>
      <title>how to post by shell</title>
      <link>/posts/notes/2020-01-14-how-to-post-by-shell/</link>
      <pubDate>Tue, 14 Jan 2020 15:18:17 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-14-how-to-post-by-shell/</guid>
      <description>how to post by shell 本篇文章留存，用作帮助使用shell去快速发布一篇文章</description>
    </item>
    
    <item>
      <title>how to auto publish post</title>
      <link>/posts/notes/2020-01-14-how-to-auto-publish-post/</link>
      <pubDate>Tue, 14 Jan 2020 15:06:01 +0800</pubDate>
      
      <guid>/posts/notes/2020-01-14-how-to-auto-publish-post/</guid>
      <description>how to auto publish post 我这里使用的是zsh
#!/bin/zsh </description>
    </item>
    
    <item>
      <title>sentences each day</title>
      <link>/posts/notes/2019-10-28-sentences-each-day/</link>
      <pubDate>Mon, 28 Oct 2019 10:44:00 +0800</pubDate>
      
      <guid>/posts/notes/2019-10-28-sentences-each-day/</guid>
      <description>转载   This approach has several drawbacks for users. Therefore, before considering this approach, make sure that it will not negatively impact the user experience.  </description>
    </item>
    
    <item>
      <title>shortcuts for nginx</title>
      <link>/posts/notes/2019-10-28-shortcuts-for-nginx/</link>
      <pubDate>Mon, 28 Oct 2019 10:44:00 +0800</pubDate>
      
      <guid>/posts/notes/2019-10-28-shortcuts-for-nginx/</guid>
      <description>转载  vim /usr/local/etc/nginx/nginx.conf sudo nginx -s reload </description>
    </item>
    
    <item>
      <title>how to use scp and tar</title>
      <link>/posts/notes/2019-10-21-how-to-use-scp-and-tar/</link>
      <pubDate>Mon, 21 Oct 2019 11:45:00 +0800</pubDate>
      
      <guid>/posts/notes/2019-10-21-how-to-use-scp-and-tar/</guid>
      <description>转载 scp scp /data/somefile.sometype tomcat@destinationhost:/data/newfile.type tar press:
tar czf result.tar.gz sourcefile/ unpress:
tar xzf result.tar.gz sourcefile/ </description>
    </item>
    
    <item>
      <title>use iterm2 and oh-my-zsh to replace terminal</title>
      <link>/posts/notes/2019-10-10-use-iterm2-and-oh-my-zsh-to-replace-terminal/</link>
      <pubDate>Thu, 10 Oct 2019 15:40:00 +0800</pubDate>
      
      <guid>/posts/notes/2019-10-10-use-iterm2-and-oh-my-zsh-to-replace-terminal/</guid>
      <description>转载 guideline https://zhuanlan.zhihu.com/p/37195261
dylib error https://discourse.brew.sh/t/library-not-loaded-usr-local-opt-gdbm-lib-libgdbm-4-dylib/2647/5</description>
    </item>
    
    <item>
      <title>how to install flutter on mac</title>
      <link>/posts/notes/2019-07-30-how-to-install-flutter-on-mac/</link>
      <pubDate>Fri, 09 Aug 2019 09:00:00 +0800</pubDate>
      
      <guid>/posts/notes/2019-07-30-how-to-install-flutter-on-mac/</guid>
      <description> 示例 # 查看flutter环境 flutter doctor # 升级flutter flutter upgrade # 查看flutter版本分支 flutter channels </description>
    </item>
    
    <item>
      <title>AbstractQueuedSynchronizer</title>
      <link>/posts/notes/2019-08-09-abstract-queued-synchronizer/</link>
      <pubDate>Fri, 09 Aug 2019 08:30:00 +0800</pubDate>
      
      <guid>/posts/notes/2019-08-09-abstract-queued-synchronizer/</guid>
      <description>AbstractQueuedSynchronizer Lock 使用Lock接口是java实现锁的一种方式。 Lock接口在java.util.concurrent.locks包下。 ReentrantLock(可重入锁)、ReadLock(读锁)、WriteLock(写锁)是Lock接口最重要的三个实现类。 ReadWriteLock接口是一个工厂接口，ReentrantReadWriteLock是ReadWriteLock接口的实现类，它包含两个内部静态类ReadLock(读锁)、WriteLock(写锁)，这两个静态类又分别实现了Lock接口。
悲观锁与乐观锁的定义 它们是在并发情况下的两种不同策略。java中没有明确的类就是乐观锁或者悲观锁。
  悲观锁的策略： 就是很悲观，认为每次去拿的数据可能被别人修改过了。所以，自己去拿数据的时候会上锁，导致别人等到锁被释放才能获取数据。
  乐观锁的策略： 每次去拿数据的时候认为别人不会修改，不上锁。 只是在更新的时候采用一种特殊方式，因为更新分为三步，先读取、然后检查、最后更新；所以在更新之前要先检查读取的数据是不是已经被别人修过过了。如果修改过了，就重新读取，再次重复检查步骤最后更新。 有的情况下，更新失败的所在的线程可能会放弃操作。
  比较 所以说 悲观锁阻塞事务，乐观锁回滚重试。
  对于写少的情况，即冲突少，采用乐观锁，可以省去锁的开销，增加数据系统的吞吐量。 如果冲突多，不断地回滚重试反倒是降低性能，不如采用悲观锁合适。
乐观锁的回滚重试 通常把这种策略用概念CAS表示：Compare-and-swap</description>
    </item>
    
    <item>
      <title>find java path</title>
      <link>/posts/notes/2019-07-30-find-java-path/</link>
      <pubDate>Tue, 30 Jul 2019 16:52:00 +0800</pubDate>
      
      <guid>/posts/notes/2019-07-30-find-java-path/</guid>
      <description>Mac下查看已安装的jdk版本及其安装目录 示例 /usr/libexec/java_home -V </description>
    </item>
    
    <item>
      <title>how to prove pi</title>
      <link>/posts/notes/2019-07-24-how-to-prove-pi/</link>
      <pubDate>Wed, 24 Jul 2019 14:06:00 +0800</pubDate>
      
      <guid>/posts/notes/2019-07-24-how-to-prove-pi/</guid>
      <description>https://zhuanlan.zhihu.com/p/48307582
如何证明π为常数？ &amp;ndash;为什么π是一个常数？即为什么所有圆的周长和直径之比为一个定值？
解答： 小圆的半径r1，周长c1；大圆的半径r2，周长c2 小圆内切正n边形，边长为k1；大圆内切正n边形，边长为k2 OA:OD=OB:OC；角AOB = 角COD；三角形OAB全等于三角形OCD ∴ k1:r1=k2:r2 设小正n边形周长为c1&#39;,大正n边形周长为c2&#39; c1&#39;=nk1,c2&#39;=nk2 c1&#39;:r1=c2&#39;:r2 当n等于无限大时，c1&#39;=c1,c2&#39;=c2 ∴ c1:r1=c2:r2
所以，对于半径不同的圆，各自周长除以半径为定值（常数），记该常数为2π， 则周长除以直径为π 证明π为常数</description>
    </item>
    
    <item>
      <title>mysql only full group by</title>
      <link>/posts/notes/2019-07-10-mysql-only-full-group-by/</link>
      <pubDate>Wed, 10 Jul 2019 16:01:00 +0800</pubDate>
      
      <guid>/posts/notes/2019-07-10-mysql-only-full-group-by/</guid>
      <description>MySQL SQL GROUP BY是如何选择哪一条数据留下的 示例 -- 建表 CREATE TABLE `src2` ( `id` int(11) DEFAULT NULL, `name` varchar(20) DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8; -- 查询 SELECT id, name FROM src2; 查询到的结果 id name 1 alpha 1 bravo 2 charlie 2 dolphin
查看当前mysql版本，并且看是否开启了only full group by SELECT version(), @@sql_mode; 5.7.20 STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
根据id使用group by查询id,name SELECT id, NAME FROM src2 GROUP BY id; 如无异常会查询到两条数据，但是同样为id1的两条数据是如何选择留哪一条呢 1 alpha 2 charlie
稍后再看，先解决这个问题 关闭only full group by -- 去除 SET sql_mode=(SELECT REPLACE(@@sql_mode,&amp;#39;ONLY_FULL_GROUP_BY&amp;#39;,&amp;#39;&amp;#39;)); -- 再次查询 SELECT version(), @@sql_mode; 如何恢复？ 5.</description>
    </item>
    
    <item>
      <title>aes encrypt in mysql</title>
      <link>/posts/notes/2019-07-10-aes-encrypt-in-mysql/</link>
      <pubDate>Wed, 10 Jul 2019 10:53:00 +0800</pubDate>
      
      <guid>/posts/notes/2019-07-10-aes-encrypt-in-mysql/</guid>
      <description>在mysql中对字符串aes加密和解密 直接上函数 # 加密 SELECT HEX(AES_ENCRYPT(&amp;#39;123456&amp;#39;,&amp;#39;root&amp;#39;)) # 解密 SELECT AES_DECRYPT(unhex(&amp;#39;537AB41AAABDEC3BAB09BE15392B916A&amp;#39;), &amp;#39;root&amp;#39;) </description>
    </item>
    
    <item>
      <title>install docker registry on centos</title>
      <link>/posts/notes/2019-06-28-install-docker-registry-on-centos/</link>
      <pubDate>Fri, 28 Jun 2019 13:06:41 +0800</pubDate>
      
      <guid>/posts/notes/2019-06-28-install-docker-registry-on-centos/</guid>
      <description>centos搭建docker私有仓库 安装docker 略过
# 重启docker systemctl daemon-reload systemctl restart docker 拉取仓库镜像 docker pull registry 运行仓库 docker run -d -v /registry:/var/lib/registry -p 5000:5000 --restart=always --privileged=true --name registry registry:latest 示例:从官方仓库拉取hello-world docker pull hello-world 给hello-world镜像打个tag，表示新的版本 docker tag hello-world 127.0.0.1:5000/hello-world:latest 推送：将新的hello-world镜像上传到私有仓库 docker push 127.0.0.1:5000/hello-world:latest 在私有仓库查看上传的镜像 ls /registry/docker/registry/v2/repositories 通过客户端查看镜像
curl http://127.0.0.1:5000/v2/_catalog 输出:
{&amp;#34;repositories&amp;#34;:[&amp;#34;hello-world&amp;#34;]} </description>
    </item>
    
    <item>
      <title>How to install jykell on mac!</title>
      <link>/posts/notes/2019-01-08-how-to-install-jykell-on-mac/</link>
      <pubDate>Tue, 08 Jan 2019 18:46:41 +0800</pubDate>
      
      <guid>/posts/notes/2019-01-08-how-to-install-jykell-on-mac/</guid>
      <description>如何在mac上安装jykell
1.安装rvm
curl -L get.rvm.io | bash -s stable source ~/.rvm/scripts/rvm rvm -v  2.安装ruby
rvm install 2.6.0 rvm list  3.安装jykell
gem source gem install jekyll jekyll -version  4.安装bundle
gem install bundle 运行bundle，安装Gemfile里的插件 bundle install  5.初始化web项目
jekyll new r2ys-site cd r2ys-site/  6.本地localhost:4000测试
jekyll serve jekyll serve --watch --baseurl &#39;/blog&#39;  7.内容生成
jekyll build  You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes.</description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/notes/2020-01-14-%E5%A6%82%E4%BD%95-%E4%BD%BF%E7%94%A8-jekyll/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/notes/2020-01-14-%E5%A6%82%E4%BD%95-%E4%BD%BF%E7%94%A8-jekyll/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/notes/fabric_%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/notes/fabric_%E9%97%AE%E9%A2%98/</guid>
      <description> 拜占庭容错 崩溃容错   </description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/notes/ioc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/notes/ioc/</guid>
      <description>IoC </description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/notes/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/notes/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</guid>
      <description>Java动态代理 </description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/notes/spring%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/notes/spring%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84/</guid>
      <description>Spring如何解决循环依赖的 三级缓存 @Lazy </description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/notes/%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%BA%8F%E5%88%97%E5%8F%B7%E7%94%9F%E6%88%90%E9%80%BB%E8%BE%91/%E5%85%91%E6%8D%A2%E7%A0%81%E5%BA%8F%E5%88%97%E5%8F%B7%E7%94%9F%E6%88%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/notes/%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%BA%8F%E5%88%97%E5%8F%B7%E7%94%9F%E6%88%90%E9%80%BB%E8%BE%91/%E5%85%91%E6%8D%A2%E7%A0%81%E5%BA%8F%E5%88%97%E5%8F%B7%E7%94%9F%E6%88%90/</guid>
      <description>兑换码/序列号生成 需求  16位字符串，包含数字或字母 随机性，无法猜测和暴力碰撞 永不重复  分析  给定的要求是永不重复，但往往业务的体量不同，上限也不同；假定单个业务类型下可支持的总量为1亿，技术上能实现10亿是否就能满足需求？ 数字或字母，参考以往Base32编码表中字母为A-Z共26个，数字为234567，去掉了容易混淆的0、1、8、9；32个字符随机是否也能满足需求？  生成流程    生成原理 先逆向考虑
32个字符的编码表最多表示多少个数？
1个字符能表示32个数：0,1,2,&amp;hellip;,30,31对应A,B,C,&amp;hellip;,6,7
2个字符能表示1024个数: 0,1,2,&amp;hellip;,30,31,32,33,34,&amp;hellip;,1022,1023对应A,B,C,&amp;hellip;,6,7,AB,AC,AD,&amp;hellip;,ZX,ZY
结论：1个字符表示32^1个数；2个字符表示32^2个数
那么32个字符表示32^32个数，约为1.4e48，支持10^40个亿。
16位字符能表示的最多有32^16个数，约为1.2e24，10^16个亿，肯定能包含在32字符编码所支持的范围，也自然远超过需求的1亿个数，我们以技术能支持的上限10亿作为目标。
接下来，怎么表示这10亿个数，用字符串、浮点、整型肯定是不理想的，我们选择用bit来表示，java中byte字节是8个bit：
1bit能表示2^1个数，以int32位无符号整数举例，32bit能表示2^32个数，float64bit能表示2^64个数
所以log2(10亿)能表示10亿个数，也就是29.897353bit能表示10亿个数，约为30bit。
log2(32^16)能表示10^16亿个数，约为80bit。
我们使用超过30bit的值来表示这10亿个数即可，那么如何确定bit使用多少位？用bit表示的值怎么转换成16位字符？
我们计划使用Base32编码表中的编码来表示最终的16位字符，Base32的转换方式是这样的，每5bit作为一个小节，5bit有2^5也就是32种情况，每种情况对应一个0-31的数值，根据下标也就能对应一个编码。
举例如下：
// 字节数组byte[]中存放了2个byte字节也就是16bit的short类型的数据：127 127 // 对应二进制表示为：01111111 01111111 // 将二进制作5位一个小节的拆分：01111 11101 11111 1base32中的编码表是： // 末位不够5位的后边补0: 01111 11101 11111 10000 // 对应的数值就是：15 29 31 16 // base32中的编码表是：ABCDEFGHIJKLMNOPQRSTUVWXYZ234567 // 所以对应的下标：15:P 29:5 31:7 16:Q // 将byte[(byte)127,(byte)127]进行base32编码的结果是：P57Q 回到刚才的问题，如何确定bit使用多少位？用bit表示的值怎么转换成16位字符？
用base32可以将76-80bit的数值转换成16位字符；根据最终序列号长度n的要求，使用(5(n-1),5n]来表示bit位数。
java以uff-8编码的数据类型中，byte8bit、short16bit、int32bit、long64bit、英文数字字符char8bit、中文字符char24bit。
为了实现16位序列号，bit总长度为80bit，数值长度需要&amp;gt;30bit，有两种选择，int32bit和long64bit，但因为我们考虑加一些payload、sign，选择int32bit即可，为其它位置预留空间。payload包含一些标记字段，如发行信息、序列号扩展信息、发行时间等。sign可以将payload和data合并之后的bit作哈希签名，方便客户端或者服务端的简单校验。
在此基础上，假定规划如下：
payload(32bit)+data(32bit)+sign(16bit)
  payload：使用长度为4字节的int，这里将业务应用的模版编号在数据库中的自增主键拿过来用，通常自增主键是bigint(8字节，能存2^64个整数)或int(4字节，能存2^32个整数，约40亿)，在字符串长度可以增加的情况下我们可以选择bigint，这里我们采用int作为payload中的模版编号。</description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/notes/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%91%E5%8E%9F%E7%94%9F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/notes/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%91%E5%8E%9F%E7%94%9F/</guid>
      <description>什么是云原生 前言 要有明确的认识：云原生一直在发展变化。技术的变革，一定是思想先行，所以首先可以体会到，云原生是一种思想驱动的技术。
软件设计有两个关键目标：高内聚、低耦合，围绕这2个核心目标，又提出了单一职责、开闭原则、里氏替换、依赖倒置、接口隔离、最少知识等设计原则。
软件工程师一直都在为这两个目标而努力奋斗，以求把软件编写得更加清晰、更加健壮、更加易于扩展和维护。
再后来，软件行业的诉求时希望开发软件变得更简单、更快捷，软件工程师更少编写代码，非专业人员也希望能开发程序，于是，更多的更傻瓜的编程语言被发明出来，更多的编程技术和编程思想被发明出来，比如库、组件、云基础设施。
于是很多技术变成了屠龙之技，比如汇编，时代变了，建国后动物不能成精了，没有龙可以宰了，然后很多软件工程师摇身一变成了调参工程师、Call API砖家、用库包能手、拼组件达人，这是效率分工的结果，也是技术发展的使然。
纵观近二十年的科技互联网发展历程，大的趋势是技术下沉，特别是近些年，随着云计算的发展和普及，基础设施越来越厚实，业务开发变得越来越容易，也越来越没有技术含量，而之前困扰小团队的性能、负载、安全性、扩展性问题都不复存在，这不禁让互联网行业的油腻大叔们噤若寒蝉，仿佛分分钟就要被卷入历史洪流而万劫不复。
虽然不可否认技术的重要性在降低，但也还不至于那么悲观。遥想PC时代，当VB、Delphi、MFC出现的时候，也有类似论调，所见即所得，点点鼠标，就可以开发PC桌面程序，是不是很高端？那时候码农的担心相比现在恐怕是只多不少吧，但后来随着互联网兴起，出现了后端开发这个工种，码农很快找到了新的战场，网络、分布式、数据库、海量服务、容灾防错，于是又玩出一堆新花样。
如果说PC时代的基础设施是控件库，互联网时代的基础实施是云，那AI时代基础设施是什么？又会有什么高端玩法？
解释 准确来说，云原生是一套方法论，也是一套或多套技术体系。我们用它来构建和运行应用程序。
 云-Cloud：应用首先都部署和运行在云服务器上，而非传统主机上 原生-Native：应用天生就要支持部署和运行在云上，天生要为了云环境而设计；最终得以在云环境中平稳、淋漓精致的、以一种最佳的方式运行；完全利用了云环境的弹性的、分布式的能力，发挥出云环境的特色  以上是抽象的以表述形式来简单形容云原生的定义。而市场上对其定论都是主观性的，各有侧重点。以下为例：
 Pivotal公司：DevOps、持续交付、微服务、容器 云原生计算基金会（CNCF）：容器化封装、自动化管理、面向微服务、服务网格(Service Mesh)、声明式API  特点 看吧，关注的点不一样，意味着定义的方向也不一样。
至少在我们的理解来看，云原生应该是有以下特点的，或者说符合云原生的应用程序应当具有以下特点：
 采用开源堆栈（K8S+Docker）进行容器化 基于微服务架构提高灵活性和可维护性 构建应用简便快捷，部署应用轻松自如；借助敏捷方法、DevOps支持持续迭代和运维自动化 运行应用按需伸缩：利用云平台设施实现弹性伸缩、动态调度、优化资源利用率  要素 微服务 组织架构决定产品形态，云原生下的应用使用微服务，能将服务通过func解耦，高内聚
容器化 把应用部署在隔离的docker中，通过K8S做容器编排、管理、负载均衡，谷歌搞的，Docker和K8S都采用Go编写，都是好东西。
DevOps 开发、运维合体，捎带上测试，一起为云原生提供持续交付能力。
所以从理解上来看，DevOps是一个敏捷思维，是一个沟通文化，也是组织形式和流程，也需要很多工具来支撑。
持续交付 有别于传统瀑布式开发模型，持续交付是不误时开发，不停机更新，不间断小步快跑。
如何去应用 首先，云原生借了云计算的东风，没有云计算，自然没有云原生，云计算是云原生的基础。
随着虚拟化技术的成熟和分布式框架的普及，在容器技术、可持续交付、编排系统等开源社区的推动下，以及微服务等开发理念的带动下，应用上云已经是不可逆转的趋势。
云计算的3层划分，即基础设施即服务(IaaS)、平台即服务(PaaS)、软件即服务(SaaS)为云原生提供了技术基础和方向指引，真正的云化不仅仅是基础设施和平台的变化，应用也需要做出改变，摈弃传统的土方法，在架构设计、开发方式、部署维护等各个阶段和方面都基于云的特点，重新设计，从而建设全新的云化的应用，即云原生应用。
1.本地部署的传统应用往往采用c/c++、企业级java编写，而云原生应用则需要用以网络为中心的go、node.js等新兴语言编写。
2.本地部署的传统应用可能需要停机更新，而云原生应用应该始终是最新的，需要支持频繁变更，持续交付，蓝绿部署。
3.本地部署的传统应用无法动态扩展，往往需要冗余资源以抵抗流量高峰，而云原生应用利用云的弹性自动伸缩，通过共享降本增效。
4.本地部署的传统应用对网络资源，比如ip、端口等有依赖，甚至是硬编码，而云原生应用对网络和存储都没有这种限制。
5.本地部署的传统应用通常人肉部署手工运维，而云原生应用这一切都是自动化的。
6.本地部署的传统应用通常依赖系统环境，而云原生应用不会硬连接到任何系统环境，而是依赖抽象的基础架构，从而获得良好移植性。
7.本地部署的传统应用有些是单体(巨石)应用，或者强依赖，而基于微服务架构的云原生应用，纵向划分服务，模块化更合理。
可见，要转向云原生应用需要以新的云原生方法开展工作，云原生包括很多方面：基础架构服务、虚拟化、容器化、容器编排、微服务。幸运的是，开源社区在云原生应用方面做出了大量卓有成效的工作，很多开源的框架和设施可以通过拿来主义直接用，2013年Docker推出并很快成为容器事实标准，随后围绕容器编排的混战中，2017年诞生的k8s很快脱颖而出，而这些技术极大的降低了开发云原生应用的技术门槛。
虽说云原生的推介文档有引导之嫌，但面对它列举的优点，作为杠精的我亦是无可辩驳。这么说的话，云原生也忒好了吧，应用是不是要立刻马上切换到云原生架构？我的观点是：理想很丰满，现实经常很骨感，需从应用的实际需要出发，目前的问题是否真的影响到业务发展，而推倒重来的代价能否承受得来。</description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/notes/%E5%8D%95%E4%BE%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/notes/%E5%8D%95%E4%BE%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>单例和原型的区别 </description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/notes/%E6%8E%92%E6%9F%A5linux%E7%9A%84%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/notes/%E6%8E%92%E6%9F%A5linux%E7%9A%84%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8/</guid>
      <description>// 基本状况
free -h // 应用程序物理内存消耗
ps -eo rss | awk &amp;lsquo;BEGIN{sum=0}{sum=sum+$1}END{print sum}&amp;rsquo; // 应用程序状况
top -b -n 1 cat /proc/meminfo 清理buffer cache $ sync
将内存中数据强制先刷新到磁盘中 清理Buffer缓存区域 $ echo 1 &amp;gt; /proc/sys/vm/drop_caches # 表示清除pagecache。 $ echo 2 &amp;gt; /proc/sys/vm/drop_caches # 表示清除回收slab分配器中的对象（包括目录项缓存和inode缓存）。slab分配器是内核中管理内存的一种机制，其中很多缓存数据实现都是用的pagecache。 $ echo 3 &amp;gt; /proc/sys/vm/drop_caches # 表示清除pagecache和slab分配器中的缓存对象</description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/notes/%E6%90%9E%E6%87%82juc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/notes/%E6%90%9E%E6%87%82juc/</guid>
      <description>搞懂JUC https://mp.weixin.qq.com/s/mmaTmHzWxIVDe_bvy5nz_w</description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/notes/%E8%AF%81%E4%B9%A6%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/notes/%E8%AF%81%E4%B9%A6%E7%9B%B8%E5%85%B3/</guid>
      <description>证书相关 什么是私钥？什么是证书？ 数字签名通常定义了两种运算： 签名和验签。发送者用自己的私钥对消息的哈希值进行签名，接收者用对方的公钥进行验签。因此，在使用数字签名时，需要通信的双方都要事先生成公钥、私钥，并且完成双方的公钥交换。其中，私钥是只能由拥有者使用的不公开密钥，公钥是可以公开的密钥。
由于公钥本身并不含有拥有者的身份信息，使用时无法确认它是真实有效的。所以需要证书认证机构（简称 CA）在核实公钥拥有者的信息后，将公钥拥有者的身份信息（如商户号、公司名称等），公钥、签发者信息、有效期以及扩展信息等进行签名，制作成“证书”。</description>
    </item>
    
    <item>
      <title>You&#39;re up and running!</title>
      <link>/posts/notes/2014-3-3-hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/notes/2014-3-3-hello-world/</guid>
      <description>Next you can update your site name, avatar and other options using the _config.yml file in the root of your repository (shown below).
![_config.yml]({{ site.baseurl }}/images/config.png)
The easiest way to make your first post is to edit this one. Go into /_posts/ and update the Hello World markdown file. For more instructions head over to the Jekyll Now repository on GitHub.</description>
    </item>
    
    <item>
      <title>我的编程之路</title>
      <link>/posts/notes/2019-06-14-the-road-to-engineering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/notes/2019-06-14-the-road-to-engineering/</guid>
      <description>C-&amp;gt;iOS-&amp;gt;javascript-&amp;gt;Java-&amp;gt;Go</description>
    </item>
    
  </channel>
</rss>
